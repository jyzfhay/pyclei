import logging
import os
import asyncio
from aiohttp import ClientSession
from rich.logging import RichHandler
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt
from utils.parser import load_template
from workflows.manager import WorkflowManager
from utils.reporter import generate_report

logging.basicConfig(level="NOTSET", format="%(message)s", datefmt="[%X]", handlers=[RichHandler()])
logger = logging.getLogger("rich")

console = Console()

def substitute_variables(template, request, variables):
    for key, value in variables.items():
        placeholder = "{{ " + key + " }}"
        request['url'] = request['url'].replace(placeholder, value)
    return request

async def fetch(session, request):
    url = request.get('url')
    if not url:
        return None

    async with session.get(url) as response:
        response_text = await response.text()
        logger.info(f"Fetched URL: {url} with status: {response.status}")
        return {
            'status_code': response.status,
            'body': response_text,
            'headers': dict(response.headers)
        }

async def run_scanner(template_paths, base_url):
    console.print(Panel("Starting Pyclei", title="Pyclei", subtitle="Initialization", style="bold green"))

    templates = []
    for path in template_paths:
        try:
            template = load_template(path)
            if template is not None:
                templates.append(template)
                logger.info(f"Loaded template: {path}")
            else:
                logger.warning(f"Failed to load template: {path}")
        except Exception as e:
            logger.error(f"Error loading template {path}: {e}")
    
    manager = WorkflowManager(templates)
    results = []

    async with ClientSession() as session:
        tasks = []
        for template in templates:
            for request in template.get('requests', []):
                for path in request.get('path', []):
                    request['url'] = path
                    request = substitute_variables(template, request, {'BaseURL': base_url})
                    tasks.append(fetch(session, request))

        responses = await asyncio.gather(*tasks)

        for response, request in zip(responses, [req for tpl in templates for req in tpl.get('requests', []) for _ in req.get('path', [])]):
            if response is not None:
                request['response'] = response
                logger.info(f"Processing response for: {request['url']}")
                results.extend(manager.execute())

    for result in results:
        logger.info(result)
        console.print(f"[bold green]Result:[/bold green] {result}")

    generate_report(results)
    console.print(Panel("Scan completed and report generated.", title="Pyclei", subtitle="Completion", style="bold green"))

def main():
    templates_dir = 'templates'
    template_files = [os.path.join(templates_dir, f) for f in os.listdir(templates_dir) if f.endswith('.yaml')]

    if not template_files:
        console.print("[bold red]No templates found in the 'templates' directory.[/bold red]")
        return

    selected_template = select_template(template_files)
    base_url = Prompt.ask("Enter the Base URL for the scan")

    asyncio.run(run_scanner([selected_template], base_url))

def select_template(template_files):
    from rich.prompt import Prompt
    from rich.table import Table

    console.print(Panel("Please select a template to use:", title="Pyclei", subtitle="Template Selection", style="bold blue"))
    
    table = Table(show_header=True, header_style="bold magenta")
    table.add_column("Index", style="dim")
    table.add_column("Template Name", style="bold")

    for idx, template in enumerate(template_files, start=1):
        table.add_row(str(idx), template)

    console.print(table)

    template_idx = Prompt.ask("Enter the index of the template you want to use", default="1")
    
    try:
        selected_idx = int(template_idx) - 1
        if selected_idx < 0 or selected_idx >= len(template_files):
            raise ValueError
        selected_template = template_files[selected_idx]
    except ValueError:
        console.print("[bold red]Invalid selection. Please enter a valid index.[/bold red]")
        return select_template(template_files)
    
    return selected_template

if __name__ == "__main__":
    main()
