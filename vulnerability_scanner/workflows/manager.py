from protocols.http import HttpScanner
from protocols.dns import DnsScanner
from protocols.tcp import TcpScanner
from protocols.udp import UdpScanner
from protocols.ftp import FtpScanner
from protocols.smtp import SmtpScanner
from utils.matcher import match_http_response, match_dns_response, match_tcp_response, match_udp_response

class WorkflowManager:
    def __init__(self, templates):
        self.templates = templates

    def execute(self):
        results = []
        for template in self.templates:
            protocol = template['protocol']
            requests = template.get('requests', [template])  # Handle multiple requests
            for req in requests:
                if protocol == 'http':
                    scanner = HttpScanner(req)
                    response = scanner.scan()
                    if match_http_response(req, response):
                        results.append(f"Vulnerability found for {req['url']}")
                elif protocol == 'dns':
                    scanner = DnsScanner(req)
                    response = scanner.scan()
                    if match_dns_response(req, response):
                        results.append(f"Vulnerability found for {req['domain']}")
                elif protocol == 'tcp':
                    scanner = TcpScanner(req)
                    response = scanner.scan()
                    if match_tcp_response(req, response):
                        results.append(f"Vulnerability found for {req['host']}:{req['port']}")
                elif protocol == 'udp':
                    scanner = UdpScanner(req)
                    response = scanner.scan()
                    if match_udp_response(req, response):
                        results.append(f"Vulnerability found for {req['host']}:{req['port']}")
                elif protocol == 'ftp':
                    scanner = FtpScanner(req)
                    response = scanner.scan()
                    if req['match']['expected_response'] in response:
                        results.append(f"Vulnerability found for {req['host']}:{req['port']}")
                elif protocol == 'smtp':
                    scanner = SmtpScanner(req)
                    response = scanner.scan()
                    if req['match']['expected_response'] in response:
                        results.append(f"Vulnerability found for {req['host']}:{req['port']}")
        return results
