import logging
from concurrent.futures import ThreadPoolExecutor, as_completed
from utils.parser import load_template
from workflows.manager import WorkflowManager

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Add file handler for logging
file_handler = logging.FileHandler('scanner.log')
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logger.addHandler(file_handler)

def run_scanner(template_paths):
    templates = [load_template(path) for path in template_paths]
    manager = WorkflowManager(templates)
    results = []

    with ThreadPoolExecutor(max_workers=5) as executor:
        future_to_template = {executor.submit(manager.execute): template for template in templates}
        for future in as_completed(future_to_template):
            try:
                result = future.result()
                results.extend(result)
            except Exception as e:
                logger.error(f"Error executing scan: {e}")

    for result in results:
        logger.info(result)
