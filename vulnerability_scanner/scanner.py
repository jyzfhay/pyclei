import logging
import os  
import asyncio
from aiohttp import ClientSession
from utils.parser import load_template  
from workflows.manager import WorkflowManager  
from utils.reporter import generate_report  

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Add file handler for logging
file_handler = logging.FileHandler('scanner.log')
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logger.addHandler(file_handler)

async def fetch(session, url):
    async with session.get(url) as response:
        return await response.text()

async def run_scanner(template_paths):
    templates = [load_template(path) for path in template_paths]
    manager = WorkflowManager(templates)
    results = []

    async with ClientSession() as session:
        tasks = []
        for template in templates:
            url = template['url']
            tasks.append(fetch(session, url))

        responses = await asyncio.gather(*tasks)

        for response in responses:
            results.extend(manager.execute(response))

    for result in results:
        logger.info(result)

    generate_report(results)

def main():
    templates_dir = 'templates'
    template_files = [os.path.join(templates_dir, f) for f in os.listdir(templates_dir) if f.endswith('.yaml')]
    asyncio.run(run_scanner(template_files))

if __name__ == "__main__":
    main()
